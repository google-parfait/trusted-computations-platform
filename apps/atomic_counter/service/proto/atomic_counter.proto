// Copyright 2024 The Trusted Computations Platform Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package apps.atomic_counter.service;

// Messages going into the Atomic Counter. Carried as header of the deliver
// application message.
message AtomicCounterInMessage {
  oneof msg {
    CounterRequest counter_request = 1;
  }
}

// Messages going from the Atomic Counter. Carried as header of the deliver
// application message.
message AtomicCounterOutMessage {
  oneof msg {
    CounterResponse counter_response = 2;
  }
}

// Represents a request to execute an operation on a named counter.
message CounterRequest {
  // The name of the counter to execute operation on.
  string name = 1;
  // The operation to execute.
  oneof op {
    CounterCompareAndSwapRequest compare_and_swap = 2;
  }
  // Arbitrary extra context to include with the request.
  bytes context = 3;
  // Arbitrary payload to store with the counter if the operation succeeds.
  bytes payload = 4;
}

// Represents a request to execute compare and swap operation.
message CounterCompareAndSwapRequest {
  // Expected counter value at the time of execution.
  int64 expected_value = 1;
  // New value to swap expected counter value with.
  int64 new_value = 2;
}

message CounterResponse {
  // The status of the requested operation execution.
  CounterStatus status = 1;
  // The operation result.
  oneof op {
    CounterCompareAndSwapResponse compare_and_swap = 2;
  }
}

// Enumerates the possible outcomes of the operation execution.
enum CounterStatus {
  COUNTER_STATUS_UNSPECIFIED = 0;
  // The operation has been successfully executed.
  COUNTER_STATUS_SUCCESS = 1;
  // The operation has been rejected (for example, because the underlying
  // replica is not a leader).
  COUNTER_STATUS_REJECTED = 2;
  // The operation has been accepted for execution but failed to execute
  // (for example, because the counter doesn't have expected value for
  // compare and swap operation).
  COUNTER_STATUS_INVALID_ARGUMENT_ERROR = 3;
  // The operation has been rejected for execution because it is malformed.
  COUNTER_STATUS_INVALID_OPERATION_ERROR = 4;
}

// Represents the response to the compare and swap operation request.
message CounterCompareAndSwapResponse {
  // The value of the counter found at the time of operation execution.
  int64 old_value = 1;
  // The new value of the counter after the operation execution. If the
  // operation was not successful the new value is equal to the old value.
  int64 new_value = 2;
}

// Represents configuration for the atomic counter.
message CounterConfig {
  // Holds the initial values.
  map<string, int64> initial_values = 1;
}

message CounterSnapshotValue {
  // Counter value.
  int64 value = 1;
  // Arbitrary payload associated with the counter value.
  bytes payload = 2;
}

// Represents snapshot of the atomic counter.
message CounterSnapshot {
  // Holds the values at the time of the snapshot.
  map<string, CounterSnapshotValue> values = 1;
}

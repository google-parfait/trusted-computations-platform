// Copyright 2024 The Trusted Computations Platform Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package ledger.service;

import "google/protobuf/timestamp.proto";
import "ledger.proto";
import "micro_rpc/messages.proto";

// This message contains details about the created public/private keypair
// that haven't been committed yet. The goal to ensure that the key is
// exactly the same on all replicas.
message CreateKeyEvent {
  // The time when the event was issued.
  google.protobuf.Timestamp event_time = 1;

  // The serialized bytes of the public key.
  bytes public_key = 2;

  // The serialized bytes of the private key.
  bytes private_key = 3;

  // The key expiration timestamp.
  google.protobuf.Timestamp expiration = 4;
}

// This message containst enough data to commit the access autorization
// and perform key rewrapping.
message AuthorizeAccessEvent {
  // The time when the event was issued.
  google.protobuf.Timestamp event_time = 1;

  // The serialized fcp.confidentialcompute.AccessPolicy the blob is subject to.
  // This must match the hash in the BlobHeader.
  bytes access_policy = 2;

  // Index of transform within the access policy.
  uint64 transform_index = 3;

  // The serialized fcp.confidentialcompute.BlobHeader of the blob being
  // accessed.
  bytes blob_header = 4;

  // Encapsulated HPKE secret key used (along with one of the Ledger's private
  // keys) to decrypt `encrypted_symmetric_key`. The encapsulated key will have
  // been produced as part of encrypting the blob's symmetric key using HPKE.
  bytes encapsulated_key = 5;

  // The blob's encrypted symmetric key, used to encrypt the blob data using
  // AEAD. This symmetric key should have been encrypted using the Ledger-owned
  // public key indicated in the blob header. The plaintext should be a COSE_Key
  // structure (RFC 9052), but this is not enforced by this method.
  bytes encrypted_symmetric_key = 6;

  // The public key to use to encrypt the response.
  //
  // This field holds a CBOR Web Token (CWT) signed by the application key in
  // `recipient_attestation_evidence`. The CWT and COSE key (RFC 9052) will
  // contain at least the following claims and parameters:
  //
  // CWT Claims (https://www.iana.org/assignments/cwt/cwt.xhtml)
  //   -65537: COSE_Key containing the public key parameters (bstr)
  //   -65538: google.protobuf.Struct containing app-specific config properties
  //
  // COSE Key Parameters (https://www.iana.org/assignments/cose/cose.xhtml)
  //        1: Key Type (int)
  //        3: Algorithm (int)
  //
  // Supported COSE Algorithms:
  //   -65537: HPKE-Base-X25519-SHA256-AES128GCM
  bytes recipient_public_key = 7;

  // Nonce used by the recipient to ensure the same AuthorizeAccessResponse
  // cannot be replayed multiple times by an unsealed portion of the stack to
  // cause it to process the same data multiple times. The recipient will
  // discard it after using it once as part of the associated data to decrypt
  // the symmetric key. This nonce must be appended to the associated data for
  // the symmetric key.
  bytes recipient_nonce = 8;
}

// Request to the Trusted Ledger to propose an operation.
message LedgerRequest {
  oneof request {
    // Creates a new public/private keypair for encrypting the symmetric keys
    // used to encrypt blobs.
    fcp.confidentialcompute.CreateKeyRequest create_key = 1;
    // Deletes a public/private keypair. Once deleted, any blobs encrypted with
    // the keypair will no longer be accessible.
    fcp.confidentialcompute.DeleteKeyRequest delete_key = 2;
    // Authorizes the caller to read an encrypted blob. If the enclave
    // requesting access is authorized by the blob's policy and the remaining
    // access budget, the Ledger will decrypt and return the blob's symmetric
    // key (re-encrypted so that only the enclave can read it).
    fcp.confidentialcompute.AuthorizeAccessRequest authorize_access = 3;
    // Prevents all future access to an encrypted blob; all subsequent
    // AuthorizeAccess requests for the blob will fail.
    fcp.confidentialcompute.RevokeAccessRequest revoke_access = 4;
  }
}

// Event used to replicate and apply the Trusted Ledger operation.
message LedgerEvent {
  oneof event {
    // Contains information about the new public/private keypair to be
    // applied to the state.
    CreateKeyEvent create_key = 1;
    // The same as in the LedgerRequest.
    fcp.confidentialcompute.DeleteKeyRequest delete_key = 2;
    // The same as in the LedgerRequest.
    AuthorizeAccessEvent authorize_access = 3;
    // The same as in the LedgerRequest.
    fcp.confidentialcompute.RevokeAccessRequest revoke_access = 4;
  }
}

// Response from the Trusted Ledger with a result of an operation.
message LedgerResponse {
  oneof response {
    // Response for CreateKeyRequest.
    fcp.confidentialcompute.CreateKeyResponse create_key = 1;
    // Response for DeleteKeyRequest.
    fcp.confidentialcompute.DeleteKeyResponse delete_key = 2;
    // Response for AuthorizeAccessRequest.
    fcp.confidentialcompute.AuthorizeAccessResponse authorize_access = 3;
    // Response for RevokeAccessRequest.
    fcp.confidentialcompute.RevokeAccessResponse revoke_access = 4;
    // Error response for all requests.
    micro_rpc_proto.Status error = 5;
  }
}

// Configuration message for the Trusted Ledger.
message LedgerConfig {}

// Snapshot of a blob budget.
message BlobBudgetSnapshot {
  // Blob ID.
  bytes blob_id = 1;

  // Per-transform budgets.
  repeated uint32 transform_access_budgets = 2;

  // Budgets that are shared between transforms.
  repeated uint32 shared_access_budgets = 3;
}

// Snapshot of state per access policy, which includes all blobs covered by that
// policy.
message PerPolicyBudgetSnapshot {
  // Access policy SHA-256 hash
  bytes access_policy_sha256 = 1;

  // Per-blob budgets.
  repeated BlobBudgetSnapshot budgets = 2;
}

message BudgetSnapshot {
  // Budget data per access policy.
  repeated PerPolicyBudgetSnapshot per_policy_snapshots = 1;

  // Blob ids whose budgets have been consumed.
  repeated bytes consumed_budgets = 2;
}

// Snapshot of state per public/private keypair.
message PerKeySnapshot {
  // ID of the public key.
  bytes key_id = 1;

  // The serialized bytes of the public key.
  bytes public_key = 2;

  // The serialized bytes of the private key.
  bytes private_key = 3;

  // Expiration for this public/private keypair.
  google.protobuf.Timestamp expiration = 4;

  // All budgets related to the current public/private keypair.
  BudgetSnapshot budgets = 5;
}

// Snapshot message for the Trusted Ledger.
message LedgerSnapshot {
  // Last known current time at the moment when the snapshot was taken.
  google.protobuf.Timestamp current_time = 1;

  // Maps public key id to the the public/private keypair specific data
  // snapshot.
  repeated PerKeySnapshot per_key_snapshots = 2;
}

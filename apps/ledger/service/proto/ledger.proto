// Copyright 2024 The Trusted Computations Platform Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package fcp.confidentialcompute;

import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";
import "micro_rpc/messages.proto";

// The Trusted Ledger is an application built on top of Trusted Computation
// Platform that is responsible for ensuring that access to encrypted blobs of
// data conforms to a data access policy, including usage limits.
//

// The messages below define an interface to execute a Trusted Ledger operation
// in the trusted enclave.
// To use this application:
//   1. Create one or more key pairs (CreateKeyRequest).
//   2. Encrypt a blob using the public key and associate it with a data access
//      policy (no interaction with the Ledger).
//   3. Request that the Ledger service unwrap the blob's encryption key so that
//      it can be read (AuthorizeAccessRequest).

// The messages below are cloned from
// https://github.com/google/federated-compute/blob/main/fcp/protos/confidentialcompute/ledger.proto;

message CreateKeyRequest {
  // The current time, which must be monotonically increasing.
  google.protobuf.Timestamp now = 1;

  // The TTL of the created key.
  google.protobuf.Duration ttl = 2;
}

message PublicKeyDetails {
  // A unique identifier for the public key. This should be included in the
  // header of any blobs encrypted using this key.
  fixed32 public_key_id = 1;

  // The time when the key was issued. Clients should not use the key if this
  // time is in the future since it could indicate that the server is using
  // the incorrect time.
  google.protobuf.Timestamp issued = 2;

  // The Ledger will not allow decryption using this key after this time.
  // Clients should not encrypt data using an expired key.
  google.protobuf.Timestamp expiration = 3;
}

message CreateKeyEvent {
  // The serialized bytes of the public key.
  bytes public_key = 1;

  // The serialized bytes of the private key.
  bytes private_key = 2;

  // Additional information about the public key.
  PublicKeyDetails public_key_details = 3;
}

message CreateKeyResponse {
  // The serialized bytes of the public key.
  bytes public_key = 1;

  // A serialized PublicKeyDetails message providing additional information
  // about the public key. This field is signed along with the public key in the
  // attestation.
  bytes public_key_details = 2;

  // The attestation for the application supplying the public key and details.
  bytes attestation = 3;
}

message DeleteKeyRequest {
  // The id of the public key to delete.
  fixed32 public_key_id = 1;
}

message DeleteKeyResponse {}

message AuthorizeAccessRequest {
  // The current time, which must be monotonically increasing.
  google.protobuf.Timestamp now = 1;

  // The serialized fcp.confidentialcompute.AccessPolicy the blob is subject to.
  // This must match the hash in the BlobHeader.
  bytes access_policy = 2;

  // The serialized fcp.confidentialcompute.BlobHeader of the blob being
  // accessed.
  bytes blob_header = 3;

  // Encapsulated HPKE secret key used (along with one of the Ledger's private
  // keys) to decrypt `encrypted_symmetric_key`. The encapsulated key will have
  // been produced as part of encrypting the blob's symmetric key using HPKE.
  bytes encapsulated_key = 4;

  // The blob's encrypted symmetric key, used to encrypt the blob data using
  // AEAD. This symmetric key should have been encrypted using the Ledger-owned
  // public key indicated in the blob header.
  bytes encrypted_symmetric_key = 5;

  // The public key to use to encrypt the response.
  bytes recipient_public_key = 6;

  // The attestation for the application supplying the public key.
  bytes recipient_attestation = 7;

  // Optional tag to disambiguate between otherwise identical accesses in the
  // policy. This field is an orchestration-level hint, not something attested
  // by the sealed application.
  string recipient_tag = 8;

  // Nonce used by the recipient to ensure the same AuthorizeAccessResponse
  // cannot be replayed multiple times by an unsealed portion of the stack to
  // cause it to process the same data multiple times. The recipient will
  // discard it after using it once as part of the associated data to decrypt
  // the symmetric key. This nonce must be appended to the associated data for
  // the symmetric key.
  bytes recipient_nonce = 10;
}

message AuthorizeAccessResponse {
  // Encapsulated HPKE secret key for decrypting `encrypted_symmetric_key`.
  bytes encapsulated_key = 1;

  // The symmetric key for reading the data, encrypted with HPKE using
  // `AuthorizeAccessRequest.recipient_public_key`. The associated data for the
  // hybrid encryption is `reencryption_public_key` +
  // `AuthorizeAccessRequest::recipient_nonce`.
  bytes encrypted_symmetric_key = 2;

  // If the application will be re-encrypting its output, the public key to use.
  // Reusing the same public key as the input ensures that derived objects have
  // the same expiration time as the original data. This key can be ignored if
  // the application doesn't encrypt its outputs (e.g., because it produces
  // anonymized aggregate results).
  bytes reencryption_public_key = 3;
}

message RevokeAccessRequest {
  // The id of the public key used to encrypt the blob.
  fixed32 public_key_id = 1;

  // The id of the blob, matching the id in its header.
  bytes blob_id = 2;
}

message RevokeAccessResponse {}

// Request to the Trusted Ledger to propose an operation.
message LedgerRequest {
  oneof request {
    // Creates a new public/private keypair for encrypting the symmetric keys
    // used to encrypt blobs.
    CreateKeyRequest create_key = 1;
    // Deletes a public/private keypair. Once deleted, any blobs encrypted with
    // the keypair will no longer be accessible.
    DeleteKeyRequest delete_key = 2;
    // Authorizes the caller to read an encrypted blob. If the enclave
    // requesting access is authorized by the blob's policy and the remaining
    // access budget, the Ledger will decrypt and return the blob's symmetric
    // key (re-encrypted so that only the enclave can read it).
    AuthorizeAccessRequest authorize_access = 3;
    // Prevents all future access to an encrypted blob; all subsequent
    // AuthorizeAccess requests for the blob will fail.
    RevokeAccessRequest revoke_access = 4;
  }
}

// Event used to replicate and apply the Trusted Ledger operation.
message LedgerEvent {
  oneof event {
    // Contains information about the new public/private keypair to be
    // applied to the state.
    CreateKeyEvent create_key = 1;
    // The same as in the LedgerRequest.
    DeleteKeyRequest delete_key = 2;
    // The same as in the LedgerRequest.
    AuthorizeAccessRequest authorize_access = 3;
    // The same as in the LedgerRequest.
    RevokeAccessRequest revoke_access = 4;
  }
}

// Response from the Trusted Ledger with a result of an operation.
message LedgerResponse {
  oneof response {
    // Response for CreateKeyRequest.
    CreateKeyResponse create_key = 1;
    // Response for DeleteKeyRequest.
    DeleteKeyResponse delete_key = 2;
    // Response for AuthorizeAccessRequest.
    AuthorizeAccessResponse authorize_access = 3;
    // Response for RevokeAccessRequest.
    RevokeAccessResponse revoke_access = 4;
    // Error response for all requests.
    micro_rpc.Status error = 5;
  }
}

// Configuration message for the Trusted Ledger.
message LedgerConfig {}

// Snapshot of a blob budget.
message BlobBudgetSnapshot {
  // Blob ID.
  bytes blob_id = 1;

  // Per-transform budgets.
  repeated uint32 transform_access_budgets = 2;

  // Budgets that are shared between transforms.
  repeated uint32 shared_access_budgets = 3;
}

// Snapshot of state per access policy, which includes all blobs covered by that
// policy.
message PerPolicyBudgetSnapshot {
  // Access policy SHA-256 hash
  bytes access_policy_sha256 = 1;

  // Per-blob budgets.
  repeated BlobBudgetSnapshot budgets = 2;
}

message BudgetSnapshot {
  // Budget data per access policy.
  repeated PerPolicyBudgetSnapshot per_policy_snapshots = 1;

  // Blob ids whose budgets have been consumed.
  repeated bytes consumed_budgets = 2;
}

// Snapshot of state per public/private keypair.
message PerKeySnapshot {
  // ID of the public key.
  fixed32 public_key_id = 1;

  // The serialized bytes of the public key.
  bytes public_key = 2;

  // The serialized bytes of the private key.
  bytes private_key = 3;

  // Expiration for this public/private keypair.
  google.protobuf.Timestamp expiration = 4;

  // All budgets related to the current public/private keypair.
  BudgetSnapshot budgets = 5;
}

// Snapshot message for the Trusted Ledger.
message LedgerSnapshot {
  // Last known current time at the moment when the snapshot was taken.
  google.protobuf.Timestamp current_time = 1;

  // Maps public key id to the the public/private keypair specific data
  // snapshot.
  repeated PerKeySnapshot per_key_snapshots = 2;
}

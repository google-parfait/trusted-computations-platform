// Copyright 2024 The Trusted Computations Platform Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package apps.tablet_cache.service;

// Messages going into the Tablet Cache. Carried as header of the deliver
// application message.
message TabletCacheInMessage {
  oneof in_msg {
    PutKeyRequest put_key_request = 1;
    GetKeyRequest get_key_request = 2;
    // Response to tablet loading request. Tablet blob is carried as payload.
    LoadTabletResponse load_tablet_response = 3;
    // Response to tablet storing request.
    StoreTabletResponse store_tablet_response = 4;
    // Response to tablet operation request. Serialized and encrypted tablet
    // response is carried as payload.
    ExecuteTabletOpsResponse execute_tablet_ops_response = 5;
    // Error to perform operation on tablet in Tablet Store. Payload is empty.
    ExecuteTabletOpsError execute_tablet_ops_error = 6;
  }
}

// Messages going from the Tablet Cache. Carried as header of the deliver
// application message.
message TabletCacheOutMessage {
  oneof out_msg {
    PutKeyResponse put_key_response = 1;
    GetKeyResponse get_key_response = 2;
    // Request to load tablet from Tablet Data Storage.
    LoadTabletRequest load_tablet_request = 3;
    // Request to store tablet in Tablet Data Storage. Tablet blob is carried as
    // payload.
    StoreTabletRequest store_tablet_request = 4;
    // Request to perform operations in Tablet Store. Serialized and encrypted
    // tablet request is carried as payload.
    ExecuteTabletOpsRequest execute_tablet_ops_request = 5;
  }
}

// Request from Tablet Cache to Tablet Store.
message ExecuteTabletOpsRequest {
  // The id of the node where leader of the Tablet Store runs.
  uint64 recipient_node_id = 1;
}

// Response from Tablet Store to Tablet Cache.
message ExecuteTabletOpsResponse {}

// Error performing operation from Tablet Store to Tablet Cache.
message ExecuteTabletOpsError {
  ExecuteTabletOpsStatus status = 1;

  string diagnostic_message = 2;
}

// Status of the tablets request processing.
enum ExecuteTabletOpsStatus {
  EXECUTE_TABLET_OPS_STATUS_UNSPECIFIED = 0;

  EXECUTE_TABLET_OPS_STATUS_REJECTED = 1;

  EXECUTE_TABLET_OPS_STATUS_INVALID_OPERATION = 2;

  EXECUTE_TABLET_OPS_STATUS_RPC_ERROR = 3;
}

// Request from Tablet Cache to untrusted host to load tablet blob from Tablet
// Data Storage.
message LoadTabletRequest {
  string blob_uri = 1;
}

// Response from untrusted host to Tablet Cache containing tablet blob from
// Tablet Data Storage.
message LoadTabletResponse {
  TabletDataStorageStatus status = 1;
}

// Request from Tablet Cache to untrusted host to store tablet blob in Tablet
// Data Storage.
message StoreTabletRequest {
  string blob_uri = 1;
}

// Response from untrusted host to Tablet Cache to store tablet blob.
message StoreTabletResponse {
  TabletDataStorageStatus status = 1;
}

// Status of a Tablet Data Storage operation.
enum TabletDataStorageStatus {
  TABLET_DATA_STORAGE_STATUS_UNSPECIFIED = 0;

  TABLET_DATA_STORAGE_STATUS_FAILED = 1;

  TABLET_DATA_STORAGE_STATUS_SUCCEEDED = 2;
}

// Request to put key value pair into the Key Value Store.
message PutKeyRequest {
  // Key to put.
  string key = 1;
  // Value to put.
  bytes value = 2;
}

// Request to get value from the Key Value Store.
message GetKeyRequest {
  // Key to get
  string key = 1;
}

// Response to put key value pair into the Key Value Store.
message PutKeyResponse {
  // Inidicates if key existed at the time the request has been executed.
  bool existed = 1;
}

// Response to get value from the Key Value Store.
message GetKeyResponse {
  // Inidicates if key existed at the time the request has been executed.
  bool existed = 1;
  // Value associated with the requested key.
  bytes value = 2;
}

// Configuration for the metadata cache for a particular table.
message TableMetadataCacheConfig {
  // The name of the table configured.
  string table_name = 1;

  // The size of the consistent hashing ring to use when maintaining
  // table metadata cache.
  uint32 table_region_size = 2;
}

// Configuration for the Tablet Metadata Cache.
message TabletMetadataCacheConfig {
  // Configuration for the individual tables maintained by the
  // Tablet Metadata Cache.
  repeated TableMetadataCacheConfig table_configs = 1;
}

// Configuration for the tablet data cache.
message TabletDataCacheConfig {
  // Maximum size in bytes of the tablet cache capacity.
  uint64 tablet_cache_capacity = 1;
}

// Configuration for the Tablet Cache.
message TabletCacheConfig {
  // Configuration for the Tablet Data Cache.
  TabletDataCacheConfig data_cache_config = 1;

  // Configuration for the Tablet Metadata Cache.
  TabletMetadataCacheConfig metadata_cache_config = 2;
}

// Content of a single tablet.
message TabletContents {
  // Keys mapped to values.
  map<string, bytes> dictionary = 1;
}

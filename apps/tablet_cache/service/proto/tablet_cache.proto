// Copyright 2024 The Trusted Computations Platform Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package apps.tablet_cache.service;

import "tablet_store.proto";

// Messages going into the Tablet Cache.
message TabletCacheInMessage {
  oneof msg {
    PutKeyRequest put_key_request = 1;
    GetKeyRequest get_key_request = 2;

    LoadTabletResponse load_tablet_response = 3;
    StoreTabletResponse store_tablet_response = 4;

    apps.tablet_store.service.TabletsResponse tablets_response = 5;
  }
}

// Messages going from the Tablet Cache.
message TabletCacheOutMessage {
  oneof msg {
    PutKeyResponse put_key_response = 1;
    GetKeyResponse get_key_response = 2;

    LoadTabletRequest load_blob_request = 3;
    StoreTabletRequest store_tablet_request = 4;

    apps.tablet_store.service.TabletsRequest tablets_request = 6;
  }
}

// Request from Tablet Cache to untrusted host to load tablet blob from Tablet
// Data Storage.
message LoadTabletRequest {
  string blob_uri = 1;
}

// Response from untrusted host to Tablet Cache containing tablet blob from
// Tablet Data Storage.
message LoadTabletResponse {
  TabletDataStorageStatus status = 1;

  bytes blob_contents = 2;
}

// Request from Tablet Cache to untrusted host to store tablet blob in Tablet
// Data Storage.
message StoreTabletRequest {
  string blob_uri = 1;

  bytes blob_contents = 2;
}

// Response from untrusted host to Tablet Cache to store tablet blob.
message StoreTabletResponse {
  TabletDataStorageStatus status = 1;
}

// Status of a Tablet Data Storage operation.
enum TabletDataStorageStatus {
  TABLET_DATA_STORAGE_STATUS_UNSPECIFIED = 0;

  TABLET_DATA_STORAGE_STATUS_FAILED = 1;

  TABLET_DATA_STORAGE_STATUS_SUCCEEDED = 2;
}

// Request to put key value pair into the Key Value Store.
message PutKeyRequest {
  string key = 1;
  string value = 2;
}

// Request to get value from the Key Value Store.
message GetKeyRequest {
  string key = 1;
}

// Response to put key value pair into the Key Value Store.
message PutKeyResponse {
  bool contains = 1;
}

// Response to get value from the Key Value Store.
message GetKeyResponse {
  bool contains = 1;

  string value = 2;
}

// Configuration for the Tablet Cache.
message TabletCacheConfig {}

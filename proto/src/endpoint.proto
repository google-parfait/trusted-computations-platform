// Copyright 2024 The Trusted Computations Platform Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package runtime.endpoint;

import "proto/attestation/reference_value.proto";
import "proto/session/session.proto";

// Messages coming from the Untrusted Launcher to the Trusted Host.
message InMessage {
  oneof msg {
    // Requests the Trusted Host to start a new replica. Must be the first
    // message sent by the Untrusted Launcher to the Trusted Host.
    StartReplicaRequest start_replica = 1;
    // Requests the Trusted Host to stop an already running replica. Must
    // be the last message sent by the Untrusted Launcher to the Trusted Host.
    StopReplicaRequest stop_replica = 2;
    // Requests the Trusted Host to issue a command to change Raft cluster that
    // is led by the replica.
    ChangeClusterRequest change_cluster = 3;
    // Requests the Trusted Host to report the current state of the Raft
    // cluster, including which replica is the leader, which replicas are in the
    // cluster, are there any pending cluster changes. The latter is important
    // to enable cluster membership changes which must be carried out one at a
    // time.
    CheckClusterRequest check_cluster = 4;
    // Requests the Trusted Host to deliver a Raft message to the replica.
    DeliverSystemMessage deliver_system_message = 5;
    // Requests the Trusted Host to deliver part of the Raft snapshot from
    // leader replica to the hosted replica.
    DeliverSnapshotRequest deliver_snapshot_request = 7;
    // Requests the Trusted Host to deliver Raft snapshot response to the leader
    // replica from the hosted replica.
    DeliverSnapshotResponse deliver_snapshot_response = 8;
    // Signifies that an attempt to deliver Raft snapshot has failed.
    DeliverSnapshotFailure deliver_snapshot_failure = 9;
    // Requests the Trusted Host to report the current state of this replica.
    GetReplicaStateRequest get_replica_state = 10;
    // Requests the Trusted Host to deliver a handshake message from another
    // replica (hosted on a different Trusted host) in order to establish a
    // secure communication channel with it.
    SecureChannelHandshake secure_channel_handshake = 11;
    // Requests the Trusted Host to deliver a message to the application.
    DeliverAppMessage deliver_app_message = 12;
  }

  reserved 6;
}

// Messages coming from the Trusted Host to the Untrusted Launcher. The
// Untrusted Launcher is then responsible for delivery of the messages to the
// intended recipients.
message OutMessage {
  oneof msg {
    // Responds to the Untrusted Launcher with the started replica identity and
    // indication status. The generated replica identity will be used to route
    // messages between replicas.
    StartReplicaResponse start_replica = 1;
    // Responds to the Untrusted Launcher with the stop replica result.
    StopReplicaResponse stop_replica = 2;
    // Requests the Untrusted Launcher to log given message for troubleshooting.
    LogMessage log = 3;
    // Responds to the Untrusted Launcher with the indication if the requested
    // Raft cluster change has been accepted for processing. Note that the
    // actual execution will take time due to replication. The Untrusted
    // Launcher can poll for the result by requesting cluster check.
    ChangeClusterResponse change_cluster = 4;
    // Responds to the Untrusted Launcher with the state of the cluster. The
    // response may be sent because it was explicitly requested or because the
    // internal state of the Raft replica has changed.
    CheckClusterResponse check_cluster = 5;
    // Requests the Untrusted Launcher to deliver the Raft message to a Raft
    // replica hosted in a different Trusted Host.
    DeliverSystemMessage deliver_system_message = 6;
    // Requests the Untrusted Launcher to deliver part of the Raft snapshot from
    // hosted leader replica to another follower replica.
    DeliverSnapshotRequest deliver_snapshot_request = 8;
    // Requests the Untrusted Launcher to deliver snapshot response from hosted
    // follower replica to the leader replica hosted in a different Trusted
    // Host.
    DeliverSnapshotResponse deliver_snapshot_response = 9;
    // Responds to the Untrusted Launcher with the current state of this
    // replica.
    GetReplicaStateResponse get_replica_state = 10;
    // Requests the Untrusted Launcher to deliver a handshake message to another
    // replica (hosted on a different Trusted host) in order to establish a
    // secure communication channel with it.
    SecureChannelHandshake secure_channel_handshake = 11;
    // Requests the Untrsuted Launcher to handle a message from the application.
    DeliverAppMessage deliver_app_message = 12;
  }

  reserved 7;
}

// Instructs the trusted application to start by initializing its internal state
// and generating a replica identity for its raft replica. This must be the
// first message sent by the untrusted launcher to the trusted application.
message StartReplicaRequest {
  // Indicates if the new Raft replica to be started as the leader of the Raft
  // cluster. Must be false if `is_ephemeral` is true.
  bool is_leader = 1;
  // If set is used as the started replica id. Must only be used for testing
  // purposes.
  uint64 replica_id_hint = 2;
  // If set is used to configure Raft node, otherwise default values are used.
  // Must only be specified if `is_ephemeral` is false.
  RaftConfig raft_config = 3;
  // Serialized application configuration, accessible through the actor context.
  bytes app_config = 4;
  // Attestation configuration for this replica. Can be used for verification
  // with other peers.
  AttestationConfig attestation_config = 5;
  // Indicates if this is an ephemeral node i.e. it is not replicated and raft is
  // disabled.
  bool is_ephemeral = 6;
}

message StartReplicaResponse {
  // Started replica id, generated by the replica or set to the provided in the
  // request id.
  uint64 replica_id = 1;
}

// Configuration for the Raft node.
message RaftConfig {
  // Minimum time measured in milliseconds between two ticks.
  uint64 tick_period = 1;
  // The number of node.tick invocations that must pass between
  // elections. That is, if a follower does not receive any message from the
  // leader of current term before ElectionTick has elapsed, it will become
  // candidate and start an election. Election tick must be greater than
  // heartbeat tick.
  uint32 election_tick = 2;
  // Heartbeat tick is the number of tick invocations that must pass between
  // heartbeats. That is, a leader sends heartbeat messages to maintain its
  // leadership every heartbeat ticks.
  uint32 heartbeat_tick = 3;
  // Limit the max size of each append message. Smaller value lowers
  // the raft recovery cost(initial probing and message lost during normal
  // operation). On the other side, it might affect the throughput during normal
  // replication.
  uint64 max_size_per_msg = 4;

  // Configuration for a Raft snapshot.
  SnapshotConfig snapshot_config = 5;

  message SnapshotConfig {
    // The maximum number of entries to accumulate in the log before creating
    // a snapshot.
    uint64 snapshot_count = 1;
    // Size of each snapshot chunk.
    uint64 chunk_size = 2;
    // Maximum number of pending chunks in flight i.e. for which the leader has
    // not received a response. This creates a back pressure mechanism to
    // control the number of in flight snapshot chunks.
    uint32 max_pending_chunks = 3;
  }

  // The number of tick events that must pass before retrying handshake with a
  // previously failed replica.
  uint64 handshake_retry_tick = 6;
}

message AttestationConfig {
  // Oak ReferenceValues specifying the binaries running at each layer of
  // the DICE attestation. These are used for verifying claims from other
  // raft peers.
  oak.attestation.v1.ReferenceValues reference_values = 1;
}

// Instructs the trusted application to stop the corresponding replica.
// This must be the last message sent by the untrusted launcher to the trusted
// application.
message StopReplicaRequest {}

message StopReplicaResponse {}

// Request to log given message for troubleshooting.
message LogMessage {
  // Holds severity of the message.
  LogSeverity severity = 1;
  // Holds message to be logged for troubleshooting.
  string message = 2;
}

enum LogSeverity {
  LOG_SEVERITY_UNSPECIFIED = 0;
  LOG_SEVERITY_INFO = 1;
  LOG_SEVERITY_WARNING = 2;
  LOG_SEVERITY_ERROR = 3;
  LOG_SEVERITY_CRITICAL = 4;
  LOG_SEVERITY_DEBUG = 5;
  LOG_SEVERITY_TRACE = 6;
}

// Request to change the cluster membership such as adding/removing replicas.
message ChangeClusterRequest {
  // Unique id to identify Raft cluster change.
  uint64 change_id = 1;
  // Unique identity of the replica to be added or removed.
  uint64 replica_id = 2;
  // Type of change to be performed i.e. addition or removal of a replica.
  ChangeClusterType change_type = 3;
}

// Response to ChangeClusterRequest.
message ChangeClusterResponse {
  // Unique id associated with ChangeClusterRequest so as to correlate the
  // response with the corresponding request.
  uint64 change_id = 1;
  // Indicates if Raft cluster change has been accepted and pending or rejected.
  ChangeClusterStatus change_status = 2;
}

enum ChangeClusterType {
  CHANGE_TYPE_UNSPECIFIED = 0;
  // Requests to add replica to the Raft cluster.
  CHANGE_TYPE_ADD_REPLICA = 1;
  // Requests to remove replica from the Raft cluster.
  CHANGE_TYPE_REMOVE_REPLICA = 2;
}

enum ChangeClusterStatus {
  CHANGE_STATUS_UNSPECIFIED = 0;
  // Indicates that the Raft cluster change has been accepted for processing.
  CHANGE_STATUS_PENDING = 1;
  // Indicates that the Raft cluster change has been rejected which can be
  // either because the replica is not a leader or there is already a pending
  // cluster change.
  CHANGE_STATUS_REJECTED = 2;
}

// Checks the current state of the Raft cluster.
message CheckClusterRequest {}

// Describes the state of the Raft cluster.
// This can also be issued by the raft cluster leader in the absence of any
// request e.g. if the leadership changes the new leader will send this message
// with its information and the old leader will send an empty
// CheckClusterResponse message indicating that it lost leadership.
message CheckClusterResponse {
  // Holds the id of the Raft replica currently elected leader. Set to 0 if the
  // leader is not known.
  uint64 leader_replica_id = 1;
  // Holds the term of the leader. Set to 0 if leader is not known.
  uint64 leader_term = 2;
  // Holds the set of replica ids that currently belong to the cluster.
  repeated uint64 cluster_replica_ids = 3;
  // Indicates if there are any pending cluster changes.
  bool has_pending_changes = 4;
}

message DeliverSystemMessage {
  // The replica id of the recipient.
  uint64 recipient_replica_id = 1;
  // The replica id of the sender.
  uint64 sender_replica_id = 2;
  // Message to be delivered, potentially encrypted.
  bytes message_contents = 3;
}

// Request to deliver part of snapshot.
message DeliverSnapshotRequest {
  // The replica id of the recipient.
  uint64 recipient_replica_id = 1;
  // The replica id of the sender.
  uint64 sender_replica_id = 2;
  // The unique id that is used to correlate attempt to deliver part of the
  // snapshot and failure or response.
  uint64 delivery_id = 3;
  // The serialized payload message, potentially encrypted.
  bytes payload_contents = 4;

  message Payload {
    // The id of the snapshot being sent. It is used to resolve conflicts of
    // late requests coming for the old snapshots. Generated by the sending
    // replica.
    uint32 snapshot_id = 1;

    oneof it {
      // Initiates snapshot transfer. Must be sent once in the very first
      // message.
      Header header = 2;
      // Continues snapshot transfer. Can be sent multiple times after header is
      // sent.
      Chunk chunk = 3;
    }

    // Initiates snapshot transfer. Always must be sent first. On receiving
    // header the receiver must reset the state and start transfer anew.
    message Header {
      // The total size of the snapshot.
      uint64 snapshot_size = 1;
      // The snapshot metadata.
      bytes snapshot_metadata = 3;
      // The contents of the first snapshot chunk. Identified by index of zero
      // in the response. All chunks but the last will be of the same size equal
      // to the size this first chunk.
      bytes chunk_contents = 4;
    }

    // Continues incremental snapshot transfer. The sender
    // may retry sending the chunks hence the receiver must be prepared
    // already seen chunks.
    message Chunk {
      // The index of the chunk of the snapshot. Must be positive as the
      // very first chunk with index zero is sent with the header.
      uint32 chunk_index = 1;
      // The contents of the chunk.
      bytes chunk_contents = 2;
    }
  }
}

// Response to deliver part of snapshot.
message DeliverSnapshotResponse {
  // The replica id of the recipient.
  uint64 recipient_replica_id = 1;
  // The replica id of the sender.
  uint64 sender_replica_id = 2;
  // The unique id that is used to correlate attempt to deliver part of the
  // snapshot and failure or response.
  uint64 delivery_id = 3;
  // The serialized payload message, potentially encrypted.
  bytes payload_contents = 4;

  message Payload {
    // The id of the snapshot being received.
    uint32 snapshot_id = 1;
    // The index of the chunk of the snapshot. Zero for the header.
    uint32 chunk_index = 2;
    // The status of the snapshot chunk status.
    DeliverSnapshotStatus status = 3;
  }
}

enum DeliverSnapshotStatus {
  SNAPSHOT_STATUS_UNSPECIFIED = 0;
  // The snapshot chunk has been accepted. If the sending side observes that all
  // chunks have been accepted then the snapshot transfer is complete.
  SNAPSHOT_STATUS_ACCEPTED = 1;
  // The snapshot chunk has been rejected.
  SNAPSHOT_STATUS_REJECTED = 2;
  // The snapshot transfer has been completed but the snapshot is corrupted.
  SNAPSHOT_STATUS_CORRUPTED = 3;
}

// Indicates that snapshot delivery has failed.
message DeliverSnapshotFailure {
  // The replica id of the sender.
  uint64 sender_replica_id = 2;
  // Contains the failed delivery id.
  uint64 delivery_id = 1;
}

// Represents composite id that uniquely identifies an entry within Raft
// cluster.
message EntryId {
  // Id of the replicate that proposed this entry.
  uint64 replica_id = 1;
  // Unique id of this entry within the replica.
  uint64 entry_id = 2;
}

// Represents an entry of the replicated log.
message Entry {
  // Unique Id for the proposal that generated this entry.
  EntryId entry_id = 1;
  // Contents of the entry.
  bytes entry_contents = 2;
}

// Request to get the current state of this replica.
message GetReplicaStateRequest {}

// Response to GetReplicaStateRequest.
message GetReplicaStateResponse {
  // Index of the last Raft committed entry that has been applied to the actor
  // on this replica.
  uint64 applied_index = 1;

  // Size (in bytes) of the latest Raft snapshot.
  uint64 latest_snapshot_size = 2;
}

// Handshake message to establish a secure communication channel between two
// raft replicas.
message SecureChannelHandshake {
  // The replica id of the recipient.
  uint64 recipient_replica_id = 1;
  // The replica id of the sender.
  uint64 sender_replica_id = 2;
  // Encryption scheme used for any future communication between the two
  // replicas.
  oneof encryption {
    NoiseProtocol noise_protocol = 3;
  }

  message NoiseProtocol {
    oneof message {
      // Request to initiate a handshake with `recipient_replica_id`.
      InitiatorRequest initiator_request = 1;
      // Response to a previously received `InitiatorRequest` to complete
      // handshake.
      RecipientResponse recipient_response = 2;
    }

    message InitiatorRequest {
      oneof message {
        // Request message for remote attestation.
        oak.session.v1.AttestRequest attest_request = 1;
        // Request message for the crypto handshake needed to establish a set
        // of session keys.
        oak.session.v1.HandshakeRequest handshake_request = 2;
      }
    }

    message RecipientResponse {
      oneof message {
        // Response message for remote attestation.
        oak.session.v1.AttestResponse attest_response = 1;
        // Response message for the crypto handshake needed to establish a set
        // of session keys.
        oak.session.v1.HandshakeResponse handshake_response = 2;
      }
    }
  }
}

// A message to and from an application.
message DeliverAppMessage {
  // Correlation id that actor may use to match request and response messages.
  uint64 correlation_id = 1;
  // Serialized but not encrypted contents of the application message header.
  // Application driver in the Untrusted Host knows how to deserialize the
  // message and handle its processing.
  bytes message_header = 2;
  // Serialized and encrypted payload of the application message. Application
  // driver in the Untrusted Host doesn't process the payload, rather forwards
  // it to another application.
  bytes message_payload = 3;
}

service EndpointService {
  // Receives messages to process by the trusted application. Conceptually
  // represents a computation slice.
  // method_id: 1
  rpc ReceiveMessage(ReceiveMessageRequest) returns (ReceiveMessageResponse) {}
}

message ReceiveMessageRequest {
  // A measurement of a monotonically nondecreasing clock provided by
  // the untrusted launcher to the trusted host. The resolution of the instant
  // is measured in milliseconds. Instants are opaque that can only be compared
  // to one another. In other words the absolute value must not be interpreted
  // as wall clock time or time since the trusted application start.
  uint64 instant = 1;

  // A potentially empty message received from the untrusted
  // launcher for the trusted application to process.
  InMessage message = 2;
}

message ReceiveMessageResponse {
  // A potentially empty set of messages that must be sent out to the peers or
  // the consumers.
  repeated OutMessage messages = 1;
}